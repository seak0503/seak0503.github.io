<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GitHub | seak0503 Blog]]></title>
  <link href="http://blog.seak.jp.net/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://blog.seak.jp.net/"/>
  <updated>2014-11-28T09:19:40+09:00</updated>
  <id>http://blog.seak.jp.net/</id>
  <author>
    <name><![CDATA[seak0503]]></name>
    <email><![CDATA[seak0503.gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git reset --hardでのファイル変更取り消しについて]]></title>
    <link href="http://blog.seak.jp.net/blog/2014/05/07/git-checkout-reset/"/>
    <updated>2014-05-07T15:34:39+09:00</updated>
    <id>http://blog.seak.jp.net/blog/2014/05/07/git-checkout-reset</id>
    <content type="html"><![CDATA[<!-- more -->




<h2>目次</h2>


<p><ul>
 <li><ul>
  <li><a href="#L............">はじめに</a></li>
  <li><a href="#L.........">対処法</a></li>
 </ul></li>
</ul>

</p>

<a name="L............"></a>
<h2>はじめに</h2>

<p>作業中に、まだインデックスに登録していない作業ツリーのファイルを
HEADの状態に戻したいことがあります。</p>

<p>そこでためしに、<code>git reset --hard HEAD -- [任意のfilename]</code>とやったところ
<code>fatal: Cannot do hard reset with paths.</code>と怒られました。</p>

<p>このような場合の対処について説明します。</p>

<a name="L........."></a>
<h2>対処法</h2>

<p><code>git reset</code>コマンドの場合、<code>--mixed</code>、<code>--hard</code>、<code>--soft</code>のオプションを使用すると
引数には、<code>&lt;commit&gt;</code>しか指定できません。</p>

<p>そのため、特定のファイルのみを過去のある時点に戻す場合は<code>git checkout</code>を利用します。</p>

<p>例えばファイル<code>test_file.txt</code>をHEADの状態に戻す場合は、下記のように実施します。</p>

<p><code>bash
$ git checkout HEAD -- test_file.txt
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高度な競合の解決(ファイル単位で解決を行う)]]></title>
    <link href="http://blog.seak.jp.net/blog/2014/04/28/git-resolution-advanced-conflict/"/>
    <updated>2014-04-28T11:45:19+09:00</updated>
    <id>http://blog.seak.jp.net/blog/2014/04/28/git-resolution-advanced-conflict</id>
    <content type="html"><![CDATA[<!-- more -->




<h2>目次</h2>


<p><ul>
 <li><ul>
  <li><a href="#L............">はじめに</a></li>
  <li><a href="#L.........................................................................................">ファイル単位で解決を行う(マージするブランチ側を正とする場合)</a></li>
 </ul></li>
 <li><a href="#L..............................................master.........................................."> *  プログラムです。今日はこれをmasterブランチで少し変種しました。</a></li>
 <li><ul>
  <li><a href="#L...................................................................................">ファイル単位で解決を行う(現在のブランチ側を正とする場合)</a></li>
 </ul></li>
</ul>

</p>

<a name="L............"></a>
<h2>はじめに</h2>

<p>競合が発生した場合、競合が発生したブロックレベルで解決を行っていくのは
非常に大変です。(競合箇所が1か所とか2か所くらいならまぁいいですが)</p>

<p>そのため、ファイル単位で現在のブランチの内容にしたいか、マージする
ブランチの内容にしたいのかを選択したくなることがあります。</p>

<p>ここではその手順を解説します。</p>

<ul>
<li><p>マージするブランチ側を採用する場合</p>

<p><code>git checkout MERGE_HEAD [file_name]</code></p></li>
<li><p>現在のブランチ側を採用する場合</p>

<p><code>git checkout ORIG_HEAD [file_name]</code></p></li>
</ul>


<a name="L........................................................................................."></a>
<h2>ファイル単位で解決を行う(マージするブランチ側を正とする場合)</h2>

<p>現在のブランチを<strong>master</strong>として、マージするブランチを<strong>topic</strong>とします。</p>

<p>ここではコンフリクトが起きた場合、<strong>topic</strong>ブランチ側のファイルを採用
するケースを解説します。</p>

<p>masterブランチでファイルを作成</p>

<p>```bash
$ git branch -l
* master</p>

<p>$ vi MakeHtml.java
```</p>

<p>```java
/<em>* 標準入力から1行づつ読み取って、htmlファイルを標準出力する
 *  プログラムです
 </em>/</p>

<p>import java.io.*;</p>

<p>public class MakeHtml {</p>

<pre><code>public static void main(String[] args) {
    System.out.println("&lt;!DOCTYPE html&gt;");
    System.out.println("&lt;html&gt;");
    System.out.println("&lt;head&gt;");
    System.out.println("&lt;title&gt;My Page&lt;/title&gt;");
    System.out.println("&lt;/head&gt;");
    System.out.println("&lt;body&gt;");

    String find_shikaku = "■";
    String find_maru = "●";

    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    try {
        String line;
        while ((line = reader.readLine()) != null) {
            int shikaku = line.indexOf(find_shikaku);
            int maru = line.indexOf(find_maru);
            if (shikaku == 0) {
                System.out.println("&lt;h1&gt;" + line.substring(1) + "&lt;/h1&gt;");
            } else if (maru == 0) {
                System.out.println("&lt;h2&gt;" + line.substring(1) + "&lt;/h2&gt;");
            } else {
                System.out.println("&lt;p&gt;" + line + "&lt;/p&gt;");
            }
        }
    } catch (IOException e) {
        System.out.println(e);
    }
    System.out.println("&lt;/body&gt;");
    System.out.println("&lt;/html&gt;");
}
</code></pre>

<p>}
```</p>

<p>```bash
$ git add MakeHtml.java</p>

<p>$ git commit -m "add MakeHtml.java"
```</p>

<p>topicブランチで<code>MakeHtml.java</code>を編集</p>

<p><code>bash
$ git checkout -b topic
$ vi MakeHtml.java
</code></p>

<p>全体的に編集を行う</p>

<p>```java
/<em>* 標準入力から1行づつ読み取って、htmlファイルを標準出力にだす
 *  プログラムです
 </em>/</p>

<p>import java.io.*;</p>

<p>public class MakeHtml2 {</p>

<pre><code>public static void main(String[] args) {
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    try {
        String line;
        System.out.println("&lt;!DOCTYPE html&gt;");
        System.out.println("&lt;html&gt;");
        System.out.println("&lt;head&gt;");
        System.out.println("&lt;title&gt;My Page&lt;/title&gt;");
        System.out.println("&lt;/head&gt;");
        System.out.println("&lt;body&gt;");
        while ((line = reader.readLine()) != null) {
            if (line.startsWith("■")) {
                System.out.println("&lt;h1&gt;" + line.substring(1) + "&lt;/h1&gt;");
            } else if (line.startsWith("●") ){
                System.out.println("&lt;h2&gt;" + line.substring(1) + "&lt;/h2&gt;");
            } else {
                System.out.println("&lt;p&gt;" + line + "&lt;/p&gt;");
            }
        }
        System.out.println("&lt;/body&gt;");
        System.out.println("&lt;/html&gt;");
    } catch (IOException e) {
        System.out.println(e);
    }
}
</code></pre>

<p>}
```</p>

<p><code>bash
$ git commit -am "edit MakeHtml.java by topic branch"
</code></p>

<p>masterブランチで<code>MakeHtml.java</code>を編集</p>

<p><code>bash
$ git checkout master
$ vi MakeHtml.java
</code></p>

<p>```java
/<em>* 標準入力から1行づつ読み取って、htmlファイルを標準出力する
 *  プログラムです。今日はこれをmasterブランチで少し変種しました。
 </em>/</p>

<p>import java.io.*;</p>

<p>public class MakeHtml1_2 {</p>

<pre><code>public static void main(String[] args) {
    System.out.println("&lt;!DOCTYPE html&gt;");
    System.out.println("&lt;html&gt;");
    System.out.println("&lt;head&gt;");
    System.out.println("&lt;title&gt;My Page&lt;/title&gt;");
    System.out.println("&lt;/head&gt;");
    System.out.println("&lt;body&gt;");

    String find_shikaku = "X";
    String find_maru = "O";

    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    try {
        String line = reader.readLine();
        while (line != null) {
            if (line.startsWith("X")) {
                System.out.println("&lt;h1&gt;" + line.substring(1) + "&lt;/h1&gt;");
            } else if (line.startsWith("O") {
                System.out.println("&lt;h2&gt;" + line.substring(1) + "&lt;/h2&gt;");
            } else {
                System.out.println("&lt;p&gt;" + line + "&lt;/p&gt;");
            }
        }
    } catch (IOException e) {
        System.out.println(e);
    }
    System.out.println("&lt;/body&gt;");
    System.out.println("&lt;/html&gt;");
}
</code></pre>

<p>}
```</p>

<p><code>bash
$ git commit -am "edit MakeHtml.java by master branch"
</code></p>

<p>masterブランチでtopicブランチをマージ</p>

<blockquote><p>ここでコンフリクトが発生する</p></blockquote>

<p>```bash
$ git branch -l
* master
  topic</p>

<p>$ git diff topic                                        <br/>
diff --git a/MakeHtml.java b/MakeHtml.java
-public class MakeHtml2 {
+public class MakeHtml1_2 {</p>

<pre><code> public static void main(String[] args) {
</code></pre>

<ul>
<li><pre><code> System.out.println("&lt;!DOCTYPE html&gt;");
</code></pre></li>
<li><pre><code> System.out.println("&lt;html&gt;");
</code></pre></li>
<li><pre><code> System.out.println("&lt;head&gt;");
</code></pre></li>
<li><pre><code> System.out.println("&lt;title&gt;My Page&lt;/title&gt;");
</code></pre></li>
<li><pre><code> System.out.println("&lt;/head&gt;");
</code></pre></li>
<li><pre><code> System.out.println("&lt;body&gt;");
</code></pre>

<p>+</p></li>
<li><pre><code> String find_shikaku = "X";
</code></pre></li>
<li><pre><code> String find_maru = "O";
</code></pre>

<p>+
-public class MakeHtml2 {
+public class MakeHtml1_2 {
 public static void main(String[] args) {</p></li>
<li><pre><code> System.out.println("&lt;!DOCTYPE html&gt;");
</code></pre></li>
<li><pre><code> System.out.println("&lt;html&gt;");
</code></pre></li>
<li><pre><code> System.out.println("&lt;head&gt;");
</code></pre></li>
<li><pre><code> System.out.println("&lt;title&gt;My Page&lt;/title&gt;");
</code></pre></li>
<li><pre><code> System.out.println("&lt;/head&gt;");
</code></pre></li>
<li><pre><code> System.out.println("&lt;body&gt;");
</code></pre>

<p>+</p></li>
<li><pre><code> String find_shikaku = "X";
</code></pre></li>
<li><pre><code> String find_maru = "O";
</code></pre>

<p>+
     BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))
     try {</p></li>
<li><pre><code>     String line;
</code></pre></li>
<li><pre><code>     System.out.println("&lt;!DOCTYPE html&gt;");
</code></pre></li>
<li><pre><code>     System.out.println("&lt;html&gt;");
</code></pre></li>
<li><pre><code>     System.out.println("&lt;head&gt;");
</code></pre></li>
<li><pre><code>     System.out.println("&lt;title&gt;My Page&lt;/title&gt;");
</code></pre></li>
<li><pre><code>     System.out.println("&lt;/head&gt;");
</code></pre></li>
<li><pre><code>     System.out.println("&lt;body&gt;");
</code></pre></li>
<li><pre><code>     while ((line = reader.readLine()) != null) {
</code></pre></li>
<li><pre><code>         if (line.startsWith("■")) {
</code></pre></li>
<li><pre><code>     String line = reader.readLine();
</code></pre></li>
<li><pre><code>     while (line != null) {
</code></pre></li>
<li><pre><code>         if (line.startsWith("X")) {
             System.out.println("&lt;h1&gt;" + line.substring(1) + "&lt;/h1&gt;");
</code></pre></li>
<li><pre><code>         } else if (line.startsWith("●") ){
</code></pre></li>
<li><pre><code>         } else if (line.startsWith("O") {
             System.out.println("&lt;h2&gt;" + line.substring(1) + "&lt;/h2&gt;");
         } else {                                                            
             System.out.println("&lt;p&gt;" + line + "&lt;/p&gt;");
         }
     }
</code></pre></li>
<li><pre><code>     System.out.println("&lt;/body&gt;");
</code></pre></li>
<li><pre><code>     System.out.println("&lt;/html&gt;");
 } catch (IOException e) {
     System.out.println(e);
 }
</code></pre></li>
<li><pre><code> System.out.println("&lt;/body&gt;");
</code></pre></li>
<li><pre><code> System.out.println("&lt;/html&gt;");
</code></pre>

<p> }
}</p></li>
</ul>


<p>$ git merge topic
Auto-merging MakeHtml.java
CONFLICT (content): Merge conflict in MakeHtml.java
Automatic merge failed; fix conflicts and then commit the result.</p>

<p>$ git status -s                                         <br/>
UU MakeHtml.java</p>

<p>$ cat MakeHtml.java                                     <br/>
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
/** 標準入力から1行づつ読み取って、htmlファイルを標準出力する</p>

<a name="L..............................................master.........................................."></a>
<h1> *  プログラムです。今日はこれをmasterブランチで少し変種しました。</h1>

<p>/** 標準入力から1行づつ読み取って、htmlファイルを標準出力にだす
 *  プログラムです</p>

<blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>topic
 */</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote>

<p>import java.io.*;</p>

<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
public class MakeHtml1_2 {</p>

<pre><code>public static void main(String[] args) {
    System.out.println("&lt;!DOCTYPE html&gt;");
    System.out.println("&lt;html&gt;");
    System.out.println("&lt;head&gt;");
    System.out.println("&lt;title&gt;My Page&lt;/title&gt;");
    System.out.println("&lt;/head&gt;");
    System.out.println("&lt;body&gt;");

    String find_shikaku = "X";
    String find_maru = "O";

    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    try {
        String line = reader.readLine();
        while (line != null) {
            if (line.startsWith("X")) {
                System.out.println("&lt;h1&gt;" + line.substring(1) + "&lt;/h1&gt;");
            } else if (line.startsWith("O") {
</code></pre>

<p>=======
public class MakeHtml2 {</p>

<pre><code>public static void main(String[] args) {
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    try {
        String line;
        System.out.println("&lt;!DOCTYPE html&gt;");
        System.out.println("&lt;html&gt;");
        System.out.println("&lt;head&gt;");
        System.out.println("&lt;title&gt;My Page&lt;/title&gt;");
        System.out.println("&lt;/head&gt;");
        System.out.println("&lt;body&gt;");
        while ((line = reader.readLine()) != null) {
            if (line.startsWith("■")) {
                System.out.println("&lt;h1&gt;" + line.substring(1) + "&lt;/h1&gt;");
            } else if (line.startsWith("●") ){
</code></pre>

<blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>topic</p>

<pre><code>                System.out.println("&lt;h2&gt;" + line.substring(1) + "&lt;/h2&gt;");
            } else {
                System.out.println("&lt;p&gt;" + line + "&lt;/p&gt;");
            }
        }
        System.out.println("&lt;/body&gt;");
        System.out.println("&lt;/html&gt;");
    } catch (IOException e) {
        System.out.println(e);
    }
}
</code></pre>

<p>}
```</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote>

<p>topicブランチ側の'MakeHtml.java'を正として採用する</p>

<p>```bash
$ git checkout MERGE_HEAD MakeHtml.java</p>

<p>$ git status -s                                         <br/>
M  MakeHtml.java</p>

<p>$ cat MakeHtml.java
/<em>* 標準入力から1行づつ読み取って、htmlファイルを標準出力にだす
 *  プログラムです
 </em>/</p>

<p>import java.io.*;</p>

<p>public class MakeHtml2 {</p>

<pre><code>public static void main(String[] args) {
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    try {
        String line;
        System.out.println("&lt;!DOCTYPE html&gt;");
        System.out.println("&lt;html&gt;");
        System.out.println("&lt;head&gt;");
        System.out.println("&lt;title&gt;My Page&lt;/title&gt;");
        System.out.println("&lt;/head&gt;");
        System.out.println("&lt;body&gt;");
        while ((line = reader.readLine()) != null) {
            if (line.startsWith("■")) {
                System.out.println("&lt;h1&gt;" + line.substring(1) + "&lt;/h1&gt;");
            } else if (line.startsWith("●") ){
                System.out.println("&lt;h2&gt;" + line.substring(1) + "&lt;/h2&gt;");
            } else {
                System.out.println("&lt;p&gt;" + line + "&lt;/p&gt;");
            }
        }
        System.out.println("&lt;/body&gt;");
        System.out.println("&lt;/html&gt;");
    } catch (IOException e) {
        System.out.println(e);
    }
}
</code></pre>

<p>}
```</p>

<p>最後に忘れずにコミットする</p>

<p>```bash
$ git commit -m "topicブランチ側のファイルを採用"
$ git log --graph                                       <br/>
*   commit 285c9b2cde90479563e3a37bd9a40a8f378971a6
|\  Merge: 4730de4 63494db
| | Author: spam ham
| | Date:   Mon Apr 28 12:37:44 2014 +0900
| |
| |     topicブランチ側のファイルを採用
| | <br/>
| * commit 63494dbda5d574deb8f1e15b092f77f0e852430f
| | Author: spam ham
| | Date:   Mon Apr 28 12:26:02 2014 +0900
| |
| |     edit MakeHtml.java by topic branch
| | <br/>
* | commit 4730de45f21b7c0b1b472b67527a0abcc2224a50
|/  Author: spam ham
|   Date:   Mon Apr 28 12:33:13 2014 +0900
| <br/>
|       edit MakeHtml.java by master branch
|<br/>
* commit 6888a07dfb84fbae958e2269b05ff84078a1480d
  Author: spam ham
  Date:   Mon Apr 28 12:20:16 2014 +0900</p>

<pre><code>  add MakeHtml.java
</code></pre>

<p>```</p>

<a name="L..................................................................................."></a>
<h2>ファイル単位で解決を行う(現在のブランチ側を正とする場合)</h2>

<p>現在のブランチを<strong>master</strong>として、マージするブランチを<strong>topic</strong>とします。</p>

<p>ここではコンフリクトが起きた場合、<strong>master</strong>ブランチ側のファイルを採用
するケースを解説します。</p>

<p>マージする直後までの解説は<em>(マージするブランチ側を正とする場合)</em>と同じ内容
なので、そちらを参照してください。</p>

<p>topicブランチ側の'MakeHtml.java'を正として採用する</p>

<p>```bash
$ git checkout ORIG_HEAD MakeHtml.java</p>

<p>$ git status -s</p>

<p>$ cat MakeHtml.java
/<em>* 標準入力から1行づつ読み取って、htmlファイルを標準出力する
 *  プログラムです。今日はこれをmasterブランチで少し変種しました。
 </em>/</p>

<p>import java.io.*;</p>

<p>public class MakeHtml1_2 {</p>

<pre><code>public static void main(String[] args) {
    System.out.println("&lt;!DOCTYPE html&gt;");
    System.out.println("&lt;html&gt;");
    System.out.println("&lt;head&gt;");
    System.out.println("&lt;title&gt;My Page&lt;/title&gt;");
    System.out.println("&lt;/head&gt;");
    System.out.println("&lt;body&gt;");

    String find_shikaku = "X";
    String find_maru = "O";

    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    try {
        String line = reader.readLine();
        while (line != null) {
            if (line.startsWith("X")) {
                System.out.println("&lt;h1&gt;" + line.substring(1) + "&lt;/h1&gt;");
            } else if (line.startsWith("O") {
                System.out.println("&lt;h2&gt;" + line.substring(1) + "&lt;/h2&gt;");
            } else {
                System.out.println("&lt;p&gt;" + line + "&lt;/p&gt;");
            }
        }
    } catch (IOException e) {
        System.out.println(e);
    }
    System.out.println("&lt;/body&gt;");
    System.out.println("&lt;/html&gt;");
}
</code></pre>

<p>}
```</p>

<p>最後に忘れずにコミットする</p>

<p>```bash
$ git commit -m "masterブランチ側のファイルを採用"
$ git log --graph
*   commit 4881e01fcd00638786f8be02f809d8a3c5416cf3
|\  Merge: 4730de4 63494db
| | Author: spam ham
| | Date:   Mon Apr 28 12:49:30 2014 +0900
| |
| |     masterブランチ側のファイルを採用
| | <br/>
| * commit 63494dbda5d574deb8f1e15b092f77f0e852430f
| | Author: spam ham
| | Date:   Mon Apr 28 12:26:02 2014 +0900
| |
| |     edit MakeHtml.java by topic branch
| | <br/>
* | commit 4730de45f21b7c0b1b472b67527a0abcc2224a50
|/  Author: spam ham
|   Date:   Mon Apr 28 12:33:13 2014 +0900
| <br/>
|       edit MakeHtml.java by master branch
|<br/>
* commit 6888a07dfb84fbae958e2269b05ff84078a1480d
  Author: spam ham
  Date:   Mon Apr 28 12:20:16 2014 +0900</p>

<pre><code>  add MakeHtml.java
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[マージで競合が発生した時に、マージをやり直す方法]]></title>
    <link href="http://blog.seak.jp.net/blog/2014/04/28/git-reset-merge/"/>
    <updated>2014-04-28T10:48:32+09:00</updated>
    <id>http://blog.seak.jp.net/blog/2014/04/28/git-reset-merge</id>
    <content type="html"><![CDATA[<!-- more -->




<h2>目次</h2>


<p><ul>
 <li><ul>
  <li><a href="#L............">はじめに</a></li>
  <li><a href="#L..................................................................">マージで競合が発生した時に、マージをやり直す</a></li>
 </ul></li>
 <li><a href="#L..edit:.commit.by.master.branch">* edit: commit by master branch</a></li>
</ul>

</p>

<a name="L............"></a>
<h2>はじめに</h2>

<p>マージを実行して競合が発生した時、競合を解決しているうちに、途中で
何をやっていたかわからなくなり、マージを最初からやり直したくなることが
あります。</p>

<p>ここではその方法を簡単に解説します。</p>

<a name="L.................................................................."></a>
<h2>マージで競合が発生した時に、マージをやり直す</h2>

<p>masterブランチでファイルを作成</p>

<p>```bash
$ git branch -l
* master</p>

<p>$ vi master_file1
* new: commit by master branch --> 1行目を編集する</p>

<p>$ git add master_file1</p>

<p>$ git commit -m "add master_file1"
```</p>

<p>topicブランチで<code>master_file1</code>を編集</p>

<p>```bash
$ git checkout -b topic
$ vi master_file1
* edit: commit by topci branch --> 1行目を編集する</p>

<p>$ git commit -am "edit master_file1 by topic branch"
```</p>

<p>masterブランチで<code>master_file1</code>を編集</p>

<p>```bash
$ git checkout master
$ vi master_file1
* edit: commit by master branch --> 1行目を編集する</p>

<p>$ git commit -am "edit master_file1 by master branch"
```</p>

<p>masterブランチでtopicブランチをマージ</p>

<blockquote><p>ここでコンフリクトが発生する</p></blockquote>

<p>```bash
$ git branch -l
* master
  topic</p>

<p>$ git diff topic                                        <br/>
diff --git a/master_file1 b/master_file1
index fc507c7..c65fc62 100644
--- a/master_file1
+++ b/master_file1
@@ -1 +1 @@
-<em> edit: commit by topci branch
+</em> edit: commit by master branch</p>

<p>$ git merge topic                                       <br/>
Auto-merging master_file1
CONFLICT (content): Merge conflict in master_file1
Automatic merge failed; fix conflicts and then commit the result.</p>

<p>$ git status -s
UU master_file1</p>

<p>$ cat master_file1
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>

<a name="L..edit:.commit.by.master.branch"></a>
<h1>* edit: commit by master branch</h1>

<ul>
<li>edit: commit by topci branch

<blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>topic
```</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></li>
</ul>


<p>マージをやり直す</p>

<blockquote><p>先ほどマージした時にコンフリクトしたファイルが、マージ前の
状態に戻っている。</p></blockquote>

<p>```bash
$ git reset --hard HEAD                                 <br/>
HEAD is now at bb4408f edit master_file1 by master branch</p>

<p>$ cat master_file1
* edit: commit by master branch
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[リモートリポジトリの登録とデフォルトリモートブランチの設定]]></title>
    <link href="http://blog.seak.jp.net/blog/2014/04/27/git-add-remote-initial-push/"/>
    <updated>2014-04-27T22:43:04+09:00</updated>
    <id>http://blog.seak.jp.net/blog/2014/04/27/git-add-remote-initial-push</id>
    <content type="html"><![CDATA[<!-- more -->




<h2>目次</h2>


<p><ul>
 <li><ul>
  <li><a href="#L............">はじめに</a></li>
  <li><a href="#L....................................">リモートリポジトリの登録</a></li>
 </ul></li>
 <li><a href="#git.blanch.-l">git blanch -l</a></li>
 <li><a href="#touch.README.md">touch README.md</a></li>
 <li><a href="#git.add.README.md">git add README.md</a></li>
 <li><a href="#git.commit.-m..First.commit.">git commit -m "First commit"</a></li>
 <li><ul>
  <li><a href="#L................................................">デフォルトリモートブランチの設定</a></li>
 </ul></li>
 <li><a href="#git.blanch.-l">git blanch -l</a></li>
 <li><ul>
  <li><a href="#L........................">他ブランチの設定</a></li>
  <li><a href="#L......................................................................................................">ローカルリポジトリとリモートリポジトリのブランチ名が異なる場合の登録</a></li>
 </ul></li>
</ul>

</p>

<a name="L............"></a>
<h2>はじめに</h2>

<p>リモートリポジトリ(Git Hub)を登録および、デフォルトリモートブランチの
設定について解説しています。</p>

<a name="L...................................."></a>
<h2>リモートリポジトリの登録</h2>

<p>事前にGit Hub側でリポジトリを作成しておき、以降の作業は
手元のローカルリポジトリ上で作業を進めます。</p>

<p>```bash</p>

<a name="git.blanch.-l"></a>
<h1>git blanch -l</h1>

<ul>
<li>master</li>
</ul>


<a name="touch.README.md"></a>
<h1>touch README.md</h1>

<a name="git.add.README.md"></a>
<h1>git add README.md</h1>

<a name="git.commit.-m..First.commit."></a>
<h1>git commit -m "First commit"</h1>

<p>```</p>

<p>この時点での".git/config"は下記の状態です</p>

<p>```bash
[core]</p>

<pre><code>    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
</code></pre>

<p>```</p>

<p>手元の開発環境のリモートリポジトリとして、Git Hub側のリポジトリを登録します。
ここでは、リモートリポジトリ名を<strong>original</strong>とします。</p>

<p><code>bash
$ git remote add original git@github.com:hoge/test.git
</code></p>

<p>この時点での".git/config"は下記の状態です。</p>

<p>```bash
[core]</p>

<pre><code>    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
</code></pre>

<p>[remote "original"] &lt;-- originalという名前のリモートリポジトリが登録された</p>

<pre><code>    url = git@github.com:hoge/test.git
    fetch = +refs/heads/*:refs/remotes/original/*
</code></pre>

<p>```</p>

<a name="L................................................"></a>
<h2>デフォルトリモートブランチの設定</h2>

<p><code>git push</code>コマンド実行時に<code>-u</code>オプションを指定することで
ローカルリポジトリのブランチとリモートリポジトのブランチの対応付けが行われます。
これにより、2回目以降はpullの場合は<code>git pull</code>、pushの場合は<code>git push</code>コマンド
とするだけでOKになります。</p>

<p>```bash</p>

<a name="git.blanch.-l"></a>
<h1>git blanch -l</h1>

<ul>
<li>master</li>
</ul>


<p>$ git push -u original master
Enter passphrase for key '/home/hoge/.ssh/id_rsa':
Counting objects: 3, done.
Writing objects: 100% (3/3), 257 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To git@github.com:hoge/test.git
 * [new branch]      master -> master
Branch master set up to track remote branch master from original.
```</p>

<p>この時点での".git/config"は下記の状態です</p>

<p>```bash
[core]</p>

<pre><code>    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
</code></pre>

<p>[remote "original"]</p>

<pre><code>    url = git@github.com:hoge/test.git
    fetch = +refs/heads/*:refs/remotes/original/*
</code></pre>

<p>[branch "master"] &lt;-- これが追加された</p>

<pre><code>    remote = original
    merge = refs/heads/master
</code></pre>

<p>```</p>

<a name="L........................"></a>
<h2>他ブランチの設定</h2>

<p>先ほどの例では<strong>masterブランチ</strong>上でデフォルトリモートブランチを
作成しましたが、今度はローカルリポジトリ上で新たに<strong>new_branch</strong>を
作成し、デフォルトリモートブランチを作成します。</p>

<p>```bash
$ git checkout -b new_branch
Switched to a new branch 'new_branch'</p>

<p>$ git branch
  master
* new_branch</p>

<p>$ git push -u original new_branch
Enter passphrase for key '/home/hoge/.ssh/id_rsa':
Total 0 (delta 0), reused 0 (delta 0)
To git@github.com:hoge/test.git
 * [new branch]      new_branch -> new_branch
Branch new_branch set up to track remote branch new_branch from original.</p>

<p>$ cat .git/config
[core]</p>

<pre><code>    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
</code></pre>

<p>[remote "original"]</p>

<pre><code>    url = git@github.com:hoge/test.git
    fetch = +refs/heads/*:refs/remotes/original/*
</code></pre>

<p>[branch "master"]</p>

<pre><code>    remote = original
    merge = refs/heads/master
</code></pre>

<p>[branch "new_branch"] &lt;--新しく追加されている</p>

<pre><code>    remote = original
    merge = refs/heads/new_branch
</code></pre>

<p>```</p>

<a name="L......................................................................................................"></a>
<h2>ローカルリポジトリとリモートリポジトリのブランチ名が異なる場合の登録</h2>

<p>これまでの説明ではローカルリポジトリとリモートリポジトリのブランチ名が
同じであることを前提にして説明していました。</p>

<p>ローカルリポジトリとリモートリポジトリでブランチ名が異なる場合は下記のように
エラーになってしまいました。</p>

<p>```bash
$ git checkout -b topic
$ touch topic_file1
$ git add topic_file1
$ git commit -m "add topic_file1"</p>

<p>$ git push -u original cipot
Enter passphrase for key '/home/hoge/.ssh/id_rsa':
error: src refspec cipot does not match any.
error: failed to push some refs to 'git@github.com:seak0503/test.git'
```</p>

<p>通常は、ローカルリポジトリをリモートに反映する場合は
<code>git push origin hoge</code>のようにしていますが、このコマンドは省略形であり
完全系は<code>git push origin hoge:hoge</code>になります。</p>

<p><code>hoge:hoge</code>の部分は<code>ローカルリポジトリのブランチ:リモートリポジトリのブランチ</code>を示します。</p>

<p><a href="/files/20140427/git_push_command.pdf">参考資料</a></p>

<p>例えば下記のように実施すると上手くいくようです。</p>

<p><code>bash
$ git push -u original topic:cipot
Enter passphrase for key '/home/hoge/.ssh/id_rsa':
Total 0 (delta 0), reused 0 (delta 0)
To git@github.com:seak0503/test.git
 * [new branch]      topic -&gt; cipot
Branch topic set up to track remote branch cipot from original.
</code></p>

<p>この時点での".git/config"は下記の状態です</p>

<p>```bash
[core]</p>

<pre><code>    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
</code></pre>

<p>[remote "original"]</p>

<pre><code>    url = git@github.com:hoge/test.git
    fetch = +refs/heads/*:refs/remotes/original/*
</code></pre>

<p>[branch "master"]</p>

<pre><code>    remote = original
    merge = refs/heads/master
</code></pre>

<p>[branch "new_branch"]</p>

<pre><code>    remote = original
    merge = refs/heads/new_branch
</code></pre>

<p>[branch "topic"] &lt;-- これが追加された</p>

<pre><code>    remote = original
    merge = refs/heads/cipot
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git revertでマージコミットの取り消しを行う]]></title>
    <link href="http://blog.seak.jp.net/blog/2014/04/25/git-revert-merge/"/>
    <updated>2014-04-25T17:14:56+09:00</updated>
    <id>http://blog.seak.jp.net/blog/2014/04/25/git-revert-merge</id>
    <content type="html"><![CDATA[<!-- more -->




<h2>目次</h2>


<p><ul>
 <li><ul>
  <li><a href="#L............">はじめに</a></li>
  <li><a href="#L....................................">マージコミットの取り消し</a></li>
  <li><a href="#L......">補足</a></li>
 </ul></li>
</ul>

</p>

<a name="L............"></a>
<h2>はじめに</h2>

<p><code>git revert</code>でマージコミットの取り消しを実施した場合に、履歴が
どうなるかを確認しました。</p>

<p>ここでは分岐元ブランチを<strong>master</strong>、分岐先ブランチを<strong>topic</strong>とします。</p>

<a name="L...................................."></a>
<h2>マージコミットの取り消し</h2>

<p>masterブランチでファイルを作成</p>

<p><code>bash
$ touch master_file1                             
$ git add master_file1
$ git commit -m "add master_file1"
</code></p>

<p>topicブランチにcheckout</p>

<p><code>bash
$ git checkout -b topic
$ git branch -l                                  
  master
* topic
</code></p>

<p>topicブランチでいくつかcommitする</p>

<p>```bash
$ touch topic_file1
$ git add topic_file1                          <br/>
$ git commit -m "add topci_file1"</p>

<p>$ touch topic_file2
$ git add topic_file2
$ git commit -m "add topci_file2"</p>

<p>$ touch topic_file3
$ git add topic_file3
$ git commit -m "add topci_file3"
```</p>

<p>masterブランチにcheckoutし、一回コミットする</p>

<p>```bash
$ git checkout master
$ git branch -l
* master
  topic</p>

<p>$ touch master_file2
$ git add master_file2
$ git commit -m "add master_file2"
```</p>

<p>topicブランチをマージする</p>

<p><code>bash
$ git merge topic
Merge made by recursive.
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 topic_file1
 create mode 100644 topic_file2
 create mode 100644 topic_file3
</code></p>

<p>ログを確認する</p>

<p>```bash
$ git log --graph
*   commit ecc627c4ec21d56880c43d70ed9c651fc27bb2ac
|\  Merge: 7611117 8998d77
| | Author: spam ham
| | Date:   Fri Apr 25 19:09:41 2014 +0900
| |
| |     Merge branch 'topic'
| | <br/>
| * commit 8998d77d981f1410201b44e83c3640922bd8941f
| | Author: spam ham
| | Date:   Fri Apr 25 18:42:45 2014 +0900
| |
| |     add topic_file3
| | <br/>
| * commit cc62d621e45b462469c2b42c932e437ff1bf2fd1
| | Author: spam ham
| | Date:   Fri Apr 25 18:42:23 2014 +0900
| |
| |     add topic_file2
| | <br/>
| * commit b91fa995c57a94a7a12d70fed70be73aa089dd2c
| | Author: spam ham
| | Date:   Fri Apr 25 18:41:56 2014 +0900
| |
| |     add topic_file1
| | <br/>
* | commit 761111709af04a7e736d6ca6a1ac23ccaac94781
|/  Author: spam ham
|   Date:   Fri Apr 25 19:08:25 2014 +0900
| <br/>
|       add master_file2
|<br/>
* commit 02c3bd6497e4d9e43117e9802b86af204f063657
  Author: spam ham
  Date:   Fri Apr 25 18:37:02 2014 +0900</p>

<pre><code>  add master_file1
</code></pre>

<p>```</p>

<p>マージコミットを取り消す</p>

<blockquote><p>マージコミットをrevertする場合は、2つのブランチのうちどちらを
残すのか指定します。
ここでは<strong>ecc627c</strong>が取り消したいマージコミットで、<strong>7611117</strong>を
含むブランチが残したいブランチだとします。
<strong>ecc627c</strong>のログを見ると<code>Merge: 7611117 8998d77</code>とあるので
親コミット<strong>7611117</strong>が親番号1、親コミット<strong>8998d77</strong>が親番号2となります。
<code>git revert -m</code>で残したい親番号を指定することで、マージコミットの
取り消しが可能となります。</p></blockquote>

<p><code>bash
$ git revert -m 1 ecc627c --no-edit
Finished one revert.
[master c77f6c6] Revert "Merge branch 'topic'"
 0 files changed, 0 insertions(+), 0 deletions(-)
 delete mode 100644 topic_file1
 delete mode 100644 topic_file2
</code></p>

<p>ログを確認する</p>

<p>```bash
$ git log --graph
* commit c77f6c6303699fa0b06b25d1becb7d44d0c5716b
| Author: spam ham
| Date:   Fri Apr 25 19:18:32 2014 +0900
|
|     Revert "Merge branch 'topic'"
|   <br/>
|     This reverts commit ecc627c4ec21d56880c43d70ed9c651fc27bb2ac, reversin
|     changes made to 761111709af04a7e736d6ca6a1ac23ccaac94781.
|  <br/>
*   commit ecc627c4ec21d56880c43d70ed9c651fc27bb2ac
|\  Merge: 7611117 8998d77
| | Author: spam ham
| | Date:   Fri Apr 25 19:09:41 2014 +0900
| |
| |     Merge branch 'topic'
| | <br/>
| * commit 8998d77d981f1410201b44e83c3640922bd8941f
| | Author: spam ham
| | Date:   Fri Apr 25 18:42:45 2014 +0900
| |
| |     add topic_file3
| | <br/>
| * commit cc62d621e45b462469c2b42c932e437ff1bf2fd1
| | Author: spam ham
| | Date:   Fri Apr 25 18:42:23 2014 +0900
| |
| |     add topic_file2
| | <br/>
| * commit b91fa995c57a94a7a12d70fed70be73aa089dd2c
| | Author: spam ham
| | Date:   Fri Apr 25 18:41:56 2014 +0900
| |
| |     add topic_file1
| | <br/>
* | commit 761111709af04a7e736d6ca6a1ac23ccaac94781
|/  Author: spam ham
|   Date:   Fri Apr 25 19:08:25 2014 +0900
| <br/>
|       add master_file2
|<br/>
* commit 02c3bd6497e4d9e43117e9802b86af204f063657
  Author: spam ham
  Date:   Fri Apr 25 18:37:02 2014 +0900</p>

<pre><code>  add master_file1
</code></pre>

<p>```</p>

<p>作業ツリーにあるファイルを確認する</p>

<p><code>bash
$ ls                                             
master_file1  master_file2
</code></p>

<a name="L......"></a>
<h2>補足</h2>

<blockquote><p>上記例では親番号1を残す対象にしましたが、親番号2を残す対象にしたら
どうなるのかも確認しました。</p>

<p>下記の実行結果を見るとわかりますが、<code>git revert</code>後は<strong>7611117</strong>で作成した
ファイル<code>master_file2</code>が作業ツリーから消えています。</p></blockquote>

<p>```bash
$ git revert -m 2 ecc627c4 --no-edit
Finished one revert.
[detached HEAD c577704] Revert "Merge branch 'topic'"
 0 files changed, 0 insertions(+), 0 deletions(-)
 delete mode 100644 master_file2</p>

<ul>
<li>commit c5777047cb99a72060cf94b59b2ae64fd507b981
| Author: spam ham
| Date:   Fri Apr 25 19:41:30 2014 +0900
|
|     Revert "Merge branch 'topic'"
|   <br/>
|     This reverts commit ecc627c4ec21d56880c43d70ed9c651fc27bb2ac, rever
|     changes made to 8998d77d981f1410201b44e83c3640922bd8941f.
|</li>
<li>commit ecc627c4ec21d56880c43d70ed9c651fc27bb2ac
|\  Merge: 7611117 8998d77
| | Author: spam ham
| | Date:   Fri Apr 25 19:09:41 2014 +0900
| |
| |     Merge branch 'topic'
| | <br/>
| * commit 8998d77d981f1410201b44e83c3640922bd8941f
| | Author: spam ham
| | Date:   Fri Apr 25 18:42:45 2014 +0900
| |
| |     add topic_file3
| | <br/>
| * commit cc62d621e45b462469c2b42c932e437ff1bf2fd1
| | Author: spam ham
| | Date:   Fri Apr 25 18:42:23 2014 +0900
| |
| |     add topic_file2
| | <br/>
| * commit b91fa995c57a94a7a12d70fed70be73aa089dd2c
| | Author: spam ham
| | Date:   Fri Apr 25 18:41:56 2014 +0900
| |
| |     add topic_file1
| |</li>
<li>| commit 761111709af04a7e736d6ca6a1ac23ccaac94781
|/  Author: spam ham
|   Date:   Fri Apr 25 19:08:25 2014 +0900
| <br/>
|       add master_file2
|</li>
<li>commit 02c3bd6497e4d9e43117e9802b86af204f063657
Author: spam ham
Date:   Fri Apr 25 18:37:02 2014 +0900
    add master_file1</li>
</ul>


<p>$ ls
master_file1  topic_file1  topic_file2  topic_file3
```</p>
]]></content>
  </entry>
  
</feed>
